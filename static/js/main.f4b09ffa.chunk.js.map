{"version":3,"sources":["types/TodoStatus.ts","components/TodoList/TodoList.tsx","helpers/getEnumKeys.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","helpers/getFilteredBy.ts","App.tsx","helpers/todoFilters.ts","index.tsx"],"names":["TodoStatus","TodoList","props","todos","onSelectTodoId","selectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","enumToDeconstruct","onChangeFormState","formState","statusKeys","Object","keys","value","todoStatus","onChange","event","target","key","placeholder","searchQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","loading","setLoading","user","setUser","useEffect","userId","responce","href","email","name","getFilteredBy","items","callbacks","filter","item","every","callback","initialFormState","All","App","setTodos","setSelectedTodoId","filterState","setFilterState","status","selectedTodo","find","filters","push","preparedSearchQuery","toLowerCase","includes","filterTodoByTitle","Active","Completed","visibleTodos","prev","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4b09ffa.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface TodosProps {\n  todos: Todo [],\n  selectedTodoId: number | null,\n  onSelectTodoId: (id: number) => void\n}\n\nexport const TodoList: React.FC<TodosProps> = (props) => {\n  const { todos, onSelectTodoId, selectedTodoId } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                {\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelectTodoId(todo.id)}\n              >\n                <span className=\"icon\">\n                  {selectedTodoId === todo.id\n                    ? (<i className=\"far fa-eye-slash\" />)\n                    : (<i className=\"far fa-eye\" />)}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","export const getEnumKeys = <T extends {}>(enumToDeconstruct: T)\n: Array<keyof typeof enumToDeconstruct> => {\n  return Object\n    .keys(enumToDeconstruct) as Array<keyof typeof enumToDeconstruct>;\n};\n","import { FC } from 'react';\nimport { FilterTodoState } from '../../types/FilterTodoState';\nimport { TodoStatus } from '../../types/TodoStatus';\nimport { getEnumKeys } from '../../helpers/getEnumKeys';\n\ninterface TodoFilterProps {\n  onChangeFormState: (key: string, value: string | TodoStatus) => void,\n  formState: FilterTodoState\n}\n\nexport const TodoFilter: FC<TodoFilterProps> = (props) => {\n  const { onChangeFormState, formState } = props;\n\n  const statusKeys = getEnumKeys(TodoStatus);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={formState.todoStatus}\n            onChange={(event) => (onChangeFormState(\n              'todoStatus',\n              event.target.value,\n            ))}\n          >\n            {statusKeys.map((key) => (\n              <option\n                key={key}\n                value={TodoStatus[key]}\n              >\n                {key}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={formState.searchQuery}\n          onChange={(event) => onChangeFormState(\n            'searchQuery',\n            event.target.value,\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {formState.searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onChangeFormState('searchQuery', '')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface TodoModalProps {\n  todo: Todo,\n  onClose: (id: number | null) => void\n}\n\nexport const TodoModal: React.FC<TodoModalProps> = ({ todo, onClose }) => {\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    getUser(todo.userId)\n      .then(responce => {\n        setLoading(false);\n        setUser(responce);\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong\n                className={classNames({\n                  'has-text-danget': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","export const getFilteredBy = <T> (\n  items: T[],\n  ...callbacks: ((item: T) => boolean) []\n) => {\n  return items\n    .filter(item => callbacks.every(callback => callback(item)));\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\nimport { FilterTodoState } from './types/FilterTodoState';\nimport { filterTodoByStatus, filterTodoByTitle } from './helpers/todoFilters';\nimport { getFilteredBy } from './helpers/getFilteredBy';\n\nconst initialFormState: FilterTodoState = {\n  todoStatus: TodoStatus.All,\n  searchQuery: '',\n};\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [todos, setTodos] = useState<Todo []>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [filterState, setFilterState] = useState<FilterTodoState>(initialFormState);\n\n  const { searchQuery, todoStatus } = filterState;\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos().then(responce => {\n      setTodos(responce);\n      setLoading(false);\n    });\n  }, []);\n\n  const updateFormState = (key: string, value: string | TodoStatus) => {\n    setFilterState(prev => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  const selectedTodo = todos\n    .find(todo => todo.id === selectedTodoId);\n\n  const filters = [];\n\n  if (searchQuery) {\n    filters.push(filterTodoByTitle(searchQuery));\n  }\n\n  if (todoStatus !== TodoStatus.All) {\n    filters.push(filterTodoByStatus(todoStatus));\n  }\n\n  const visibleTodos = getFilteredBy(todos, ...filters);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onChangeFormState={updateFormState}\n                formState={filterState}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && <Loader />}\n              {!loading && todos.length > 0 && (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={selectedTodoId}\n                  onSelectTodoId={(id) => setSelectedTodoId(id)}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={(id) => setSelectedTodoId(id)}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { TodoStatus } from '../types/TodoStatus';\n\nexport const filterTodoByTitle = (searchQuery: string) => {\n  const preparedSearchQuery = searchQuery.toLowerCase();\n\n  return (todo: Todo) => (\n    todo.title.toLowerCase().includes(preparedSearchQuery)\n  );\n};\n\nexport const filterTodoByStatus = (status: TodoStatus) => {\n  return (todo: Todo) => {\n    switch (status) {\n      case TodoStatus.Active:\n        return !todo.completed;\n      case TodoStatus.Completed:\n        return todo.completed;\n      default:\n        return true;\n    }\n  };\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}